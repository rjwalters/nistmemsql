use crate::keywords::Keyword;
use crate::token::Token;

/// Map a keyword string (uppercase) to its corresponding Token.
/// Returns Token::Identifier if the string is not a recognized keyword.
pub(super) fn map_keyword(upper_text: String) -> Token {
    match upper_text.as_str() {
        "SELECT" => Token::Keyword(Keyword::Select),
        "DISTINCT" => Token::Keyword(Keyword::Distinct),
        "FROM" => Token::Keyword(Keyword::From),
        "WHERE" => Token::Keyword(Keyword::Where),
        "INSERT" => Token::Keyword(Keyword::Insert),
        "INTO" => Token::Keyword(Keyword::Into),
        "UPDATE" => Token::Keyword(Keyword::Update),
        "DELETE" => Token::Keyword(Keyword::Delete),
        "CREATE" => Token::Keyword(Keyword::Create),
        "TABLE" => Token::Keyword(Keyword::Table),
        "DROP" => Token::Keyword(Keyword::Drop),
        "ADD" => Token::Keyword(Keyword::Add),
        "ALTER" => Token::Keyword(Keyword::Alter),
        "AND" => Token::Keyword(Keyword::And),
        "OR" => Token::Keyword(Keyword::Or),
        "NOT" => Token::Keyword(Keyword::Not),
        "NULL" => Token::Keyword(Keyword::Null),
        "TRUE" => Token::Keyword(Keyword::True),
        "FALSE" => Token::Keyword(Keyword::False),
        "AS" => Token::Keyword(Keyword::As),
        "JOIN" => Token::Keyword(Keyword::Join),
        "LEFT" => Token::Keyword(Keyword::Left),
        "RIGHT" => Token::Keyword(Keyword::Right),
        "INNER" => Token::Keyword(Keyword::Inner),
        "OUTER" => Token::Keyword(Keyword::Outer),
        "CROSS" => Token::Keyword(Keyword::Cross),
        "FULL" => Token::Keyword(Keyword::Full),
        "ON" => Token::Keyword(Keyword::On),
        "GROUP" => Token::Keyword(Keyword::Group),
        "BY" => Token::Keyword(Keyword::By),
        "HAVING" => Token::Keyword(Keyword::Having),
        "ORDER" => Token::Keyword(Keyword::Order),
        "ASC" => Token::Keyword(Keyword::Asc),
        "DESC" => Token::Keyword(Keyword::Desc),
        "LIMIT" => Token::Keyword(Keyword::Limit),
        "OFFSET" => Token::Keyword(Keyword::Offset),
        "SET" => Token::Keyword(Keyword::Set),
        "VALUES" => Token::Keyword(Keyword::Values),
        "IN" => Token::Keyword(Keyword::In),
        "BETWEEN" => Token::Keyword(Keyword::Between),
        "ASYMMETRIC" => Token::Keyword(Keyword::Asymmetric),
        "SYMMETRIC" => Token::Keyword(Keyword::Symmetric),
        "LIKE" => Token::Keyword(Keyword::Like),
        "EXISTS" => Token::Keyword(Keyword::Exists),
        "IF" => Token::Keyword(Keyword::If),
        "IS" => Token::Keyword(Keyword::Is),
        "ALL" => Token::Keyword(Keyword::All),
        "ANY" => Token::Keyword(Keyword::Any),
        "SOME" => Token::Keyword(Keyword::Some),
        "UNION" => Token::Keyword(Keyword::Union),
        "INTERSECT" => Token::Keyword(Keyword::Intersect),
        "EXCEPT" => Token::Keyword(Keyword::Except),
        "WITH" => Token::Keyword(Keyword::With),
        "RECURSIVE" => Token::Keyword(Keyword::Recursive),
        "DATE" => Token::Keyword(Keyword::Date),
        "DEFAULT" => Token::Keyword(Keyword::Default),
        "TIME" => Token::Keyword(Keyword::Time),
        "TIMESTAMP" => Token::Keyword(Keyword::Timestamp),
        "INTERVAL" => Token::Keyword(Keyword::Interval),
        "CAST" => Token::Keyword(Keyword::Cast),
        // CASE expression keywords
        "CASE" => Token::Keyword(Keyword::Case),
        "WHEN" => Token::Keyword(Keyword::When),
        "THEN" => Token::Keyword(Keyword::Then),
        "ELSE" => Token::Keyword(Keyword::Else),
        "END" => Token::Keyword(Keyword::End),
        // Window function keywords
        "OVER" => Token::Keyword(Keyword::Over),
        "PARTITION" => Token::Keyword(Keyword::Partition),
        "ROWS" => Token::Keyword(Keyword::Rows),
        "RANGE" => Token::Keyword(Keyword::Range),
        "PRECEDING" => Token::Keyword(Keyword::Preceding),
        "FOLLOWING" => Token::Keyword(Keyword::Following),
        "UNBOUNDED" => Token::Keyword(Keyword::Unbounded),
        "CURRENT" => Token::Keyword(Keyword::Current),
        "CURRENT_DATE" => Token::Keyword(Keyword::CurrentDate),
        "CURRENT_TIME" => Token::Keyword(Keyword::CurrentTime),
        "CURRENT_TIMESTAMP" => Token::Keyword(Keyword::CurrentTimestamp),
        // Note: ROW_NUMBER, RANK, DENSE_RANK, NTILE, LAG, LEAD are treated as
        // identifiers (function names), not keywords. They are classified as
        // window functions by the parser's classify_window_function() method.
        // Transaction keywords
        "BEGIN" => Token::Keyword(Keyword::Begin),
        "COLUMN" => Token::Keyword(Keyword::Column),
        "COMMIT" => Token::Keyword(Keyword::Commit),
        "CONSTRAINT" => Token::Keyword(Keyword::Constraint),
        "ROLLBACK" => Token::Keyword(Keyword::Rollback),
        "START" => Token::Keyword(Keyword::Start),
        "TRANSACTION" => Token::Keyword(Keyword::Transaction),
        // Schema keywords
        "SCHEMA" => Token::Keyword(Keyword::Schema),
        "CASCADE" => Token::Keyword(Keyword::Cascade),
        "RESTRICT" => Token::Keyword(Keyword::Restrict),
        "SAVEPOINT" => Token::Keyword(Keyword::Savepoint),
        "RELEASE" => Token::Keyword(Keyword::Release),
        "TO" => Token::Keyword(Keyword::To),
        // Constraint keywords
        "PRIMARY" => Token::Keyword(Keyword::Primary),
        "FOREIGN" => Token::Keyword(Keyword::Foreign),
        "KEY" => Token::Keyword(Keyword::Key),
        "UNIQUE" => Token::Keyword(Keyword::Unique),
        "CHECK" => Token::Keyword(Keyword::Check),
        "REFERENCES" => Token::Keyword(Keyword::References),
        "ACTION" => Token::Keyword(Keyword::Action),
        // TRIM function keywords
        "BOTH" => Token::Keyword(Keyword::Both),
        "LEADING" => Token::Keyword(Keyword::Leading),
        "TRAILING" => Token::Keyword(Keyword::Trailing),
        // Data type keywords
        "VARYING" => Token::Keyword(Keyword::Varying),
        "CHARACTERS" => Token::Keyword(Keyword::Characters),
        "OCTETS" => Token::Keyword(Keyword::Octets),
        "USING" => Token::Keyword(Keyword::Using),
        // SUBSTRING function keywords
        "FOR" => Token::Keyword(Keyword::For),
        // GRANT keywords
        "GRANT" => Token::Keyword(Keyword::Grant),
        "PRIVILEGES" => Token::Keyword(Keyword::Privileges),
        "USAGE" => Token::Keyword(Keyword::Usage),
        "OPTION" => Token::Keyword(Keyword::Option),
        // REVOKE keywords
        "REVOKE" => Token::Keyword(Keyword::Revoke),
        "GRANTED" => Token::Keyword(Keyword::Granted),
        // Advanced privilege keywords
        "EXECUTE" => Token::Keyword(Keyword::Execute),
        "TRIGGER" => Token::Keyword(Keyword::Trigger),
        "UNDER" => Token::Keyword(Keyword::Under),
        // Role management keywords
        "ROLE" => Token::Keyword(Keyword::Role),
        // Advanced SQL object keywords
        "DOMAIN" => Token::Keyword(Keyword::Domain),
        "SEQUENCE" => Token::Keyword(Keyword::Sequence),
        "TYPE" => Token::Keyword(Keyword::Type),
        "COLLATION" => Token::Keyword(Keyword::Collation),
        "CHARACTER" => Token::Keyword(Keyword::Character),
        "TRANSLATION" => Token::Keyword(Keyword::Translation),
        "VIEW" => Token::Keyword(Keyword::View),
        "ASSERTION" => Token::Keyword(Keyword::Assertion),
        // Trigger-specific keywords
        "BEFORE" => Token::Keyword(Keyword::Before),
        "AFTER" => Token::Keyword(Keyword::After),
        "INSTEAD" => Token::Keyword(Keyword::Instead),
        "OF" => Token::Keyword(Keyword::Of),
        "EACH" => Token::Keyword(Keyword::Each),
        "ROW" => Token::Keyword(Keyword::Row),
        "STATEMENT" => Token::Keyword(Keyword::Statement),
        // SEQUENCE specific keywords
        "INCREMENT" => Token::Keyword(Keyword::Increment),
        "MINVALUE" => Token::Keyword(Keyword::Minvalue),
        "MAXVALUE" => Token::Keyword(Keyword::Maxvalue),
        "CYCLE" => Token::Keyword(Keyword::Cycle),
        "NO" => Token::Keyword(Keyword::No),
        "RESTART" => Token::Keyword(Keyword::Restart),
        "NEXT" => Token::Keyword(Keyword::Next),
        // Session configuration keywords (SQL:1999)
        "CATALOG" => Token::Keyword(Keyword::Catalog),
        "NAMES" => Token::Keyword(Keyword::Names),
        "ZONE" => Token::Keyword(Keyword::Zone),
        "LOCAL" => Token::Keyword(Keyword::Local),
        "HOUR" => Token::Keyword(Keyword::Hour),
        "MINUTE" => Token::Keyword(Keyword::Minute),
        // Callable object keywords (functions, procedures, methods)
        "FUNCTION" => Token::Keyword(Keyword::Function),
        "PROCEDURE" => Token::Keyword(Keyword::Procedure),
        "ROUTINE" => Token::Keyword(Keyword::Routine),
        "METHOD" => Token::Keyword(Keyword::Method),
        "CONSTRUCTOR" => Token::Keyword(Keyword::Constructor),
        "STATIC" => Token::Keyword(Keyword::Static),
        "INSTANCE" => Token::Keyword(Keyword::Instance),
        // Internationalization keywords (SQL:1999)
        "GET" => Token::Keyword(Keyword::Get),
        "PAD" => Token::Keyword(Keyword::Pad),
        "SPACE" => Token::Keyword(Keyword::Space),
        "COLLATE" => Token::Keyword(Keyword::Collate),
        // CURSOR keywords
        "DECLARE" => Token::Keyword(Keyword::Declare),
        "CURSOR" => Token::Keyword(Keyword::Cursor),
        "INSENSITIVE" => Token::Keyword(Keyword::Insensitive),
        "SCROLL" => Token::Keyword(Keyword::Scroll),
        "HOLD" => Token::Keyword(Keyword::Hold),
        "WITHOUT" => Token::Keyword(Keyword::Without),
        "READ" => Token::Keyword(Keyword::Read),
        "ONLY" => Token::Keyword(Keyword::Only),
        "WRITE" => Token::Keyword(Keyword::Write),
        "OIDS" => Token::Keyword(Keyword::Oids),
        "SERIALIZABLE" => Token::Keyword(Keyword::Serializable),
        "ISOLATION" => Token::Keyword(Keyword::Isolation),
        "LEVEL" => Token::Keyword(Keyword::Level),
        _ => Token::Identifier(upper_text), // Regular identifiers are normalized to uppercase
    }
}
