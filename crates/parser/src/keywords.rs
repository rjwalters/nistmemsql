use std::fmt;

/// SQL Keywords supported by the parser.
#[derive(Debug, Clone, PartialEq, Eq)]
pub enum Keyword {
    Select,
    Distinct,
    From,
    Where,
    Insert,
    Into,
    Update,
    Delete,
    Create,
    Table,
    Drop,
    Alter,
    And,
    Or,
    Not,
    Null,
    True,
    False,
    As,
    Join,
    Left,
    Right,
    Inner,
    Outer,
    Cross,
    Full,
    On,
    Group,
    By,
    Having,
    Order,
    Asc,
    Desc,
    Limit,
    Offset,
    Set,
    Values,
    In,
    Between,
    Like,
    Exists,
    If,
    All,
    Any,
    Some,
    Union,
    Intersect,
    Except,
    With,
    Recursive,
    Date,
    Time,
    Timestamp,
    Interval,
    Cast,
    // CASE expression keywords
    Case,
    When,
    Then,
    Else,
    End,
    // Window function keywords
    Over,
    Partition,
    Rows,
    Range,
    Preceding,
    Following,
    Unbounded,
    Current,
    // Note: Window function names (ROW_NUMBER, RANK, etc.) are identifiers, not keywords
    // Constraint keywords
    Primary,
    Foreign,
    Key,
    Unique,
    Check,
    References,
    // IS NULL keywords
    Is,
    // Transaction keywords
    Begin,
    Commit,
    Rollback,
    // SCHEMA keywords
    Cascade,
    Restrict,
    Schema,
    Start,
    Transaction,
    // ALTER TABLE keywords
    Add,
    Column,
    Constraint,
    Default,
    // SAVEPOINT keywords
    Savepoint,
    Release,
    To,
    // TRIM function keywords
    Both,
    Leading,
    Trailing,
    // Data type keywords
    Varying,
    Characters,
    Octets,
    // SUBSTRING function keywords
    For,
    // Current date/time function keywords
    CurrentDate,
    CurrentTime,
    CurrentTimestamp,
    // GRANT keywords
    Grant,
    Privileges,
}

impl fmt::Display for Keyword {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let keyword_str = match self {
            Keyword::Select => "SELECT",
            Keyword::Distinct => "DISTINCT",
            Keyword::From => "FROM",
            Keyword::Where => "WHERE",
            Keyword::Insert => "INSERT",
            Keyword::Into => "INTO",
            Keyword::Update => "UPDATE",
            Keyword::Delete => "DELETE",
            Keyword::Create => "CREATE",
            Keyword::Table => "TABLE",
            Keyword::Drop => "DROP",
            Keyword::Alter => "ALTER",
            Keyword::And => "AND",
            Keyword::Or => "OR",
            Keyword::Not => "NOT",
            Keyword::Null => "NULL",
            Keyword::True => "TRUE",
            Keyword::False => "FALSE",
            Keyword::As => "AS",
            Keyword::Join => "JOIN",
            Keyword::Left => "LEFT",
            Keyword::Right => "RIGHT",
            Keyword::Inner => "INNER",
            Keyword::Outer => "OUTER",
            Keyword::Cross => "CROSS",
            Keyword::Full => "FULL",
            Keyword::On => "ON",
            Keyword::Group => "GROUP",
            Keyword::By => "BY",
            Keyword::Having => "HAVING",
            Keyword::Order => "ORDER",
            Keyword::Asc => "ASC",
            Keyword::Desc => "DESC",
            Keyword::Limit => "LIMIT",
            Keyword::Offset => "OFFSET",
            Keyword::Set => "SET",
            Keyword::Values => "VALUES",
            Keyword::In => "IN",
            Keyword::Between => "BETWEEN",
            Keyword::Like => "LIKE",
            Keyword::Exists => "EXISTS",
            Keyword::If => "IF",
            Keyword::All => "ALL",
            Keyword::Any => "ANY",
            Keyword::Some => "SOME",
            Keyword::Union => "UNION",
            Keyword::Intersect => "INTERSECT",
            Keyword::Except => "EXCEPT",
            Keyword::With => "WITH",
            Keyword::Recursive => "RECURSIVE",
            Keyword::Date => "DATE",
            Keyword::Time => "TIME",
            Keyword::Timestamp => "TIMESTAMP",
            Keyword::Interval => "INTERVAL",
            Keyword::Cast => "CAST",
            Keyword::Case => "CASE",
            Keyword::When => "WHEN",
            Keyword::Then => "THEN",
            Keyword::Else => "ELSE",
            Keyword::End => "END",
            Keyword::Over => "OVER",
            Keyword::Partition => "PARTITION",
            Keyword::Rows => "ROWS",
            Keyword::Range => "RANGE",
            Keyword::Preceding => "PRECEDING",
            Keyword::Following => "FOLLOWING",
            Keyword::Unbounded => "UNBOUNDED",
            Keyword::Current => "CURRENT",
            Keyword::Primary => "PRIMARY",
            Keyword::Foreign => "FOREIGN",
            Keyword::Key => "KEY",
            Keyword::Unique => "UNIQUE",
            Keyword::Check => "CHECK",
            Keyword::References => "REFERENCES",
            Keyword::Is => "IS",
            Keyword::Begin => "BEGIN",
            Keyword::Commit => "COMMIT",
            Keyword::Rollback => "ROLLBACK",
            Keyword::Cascade => "CASCADE",
            Keyword::Restrict => "RESTRICT",
            Keyword::Schema => "SCHEMA",
            Keyword::Start => "START",
            Keyword::Transaction => "TRANSACTION",
            Keyword::Add => "ADD",
            Keyword::Column => "COLUMN",
            Keyword::Constraint => "CONSTRAINT",
            Keyword::Default => "DEFAULT",
            Keyword::Savepoint => "SAVEPOINT",
            Keyword::Release => "RELEASE",
            Keyword::To => "TO",
            Keyword::Both => "BOTH",
            Keyword::Leading => "LEADING",
            Keyword::Trailing => "TRAILING",
            Keyword::Varying => "VARYING",
            Keyword::Characters => "CHARACTERS",
            Keyword::Octets => "OCTETS",
            Keyword::For => "FOR",
            Keyword::CurrentDate => "CURRENT_DATE",
            Keyword::CurrentTime => "CURRENT_TIME",
            Keyword::CurrentTimestamp => "CURRENT_TIMESTAMP",
            Keyword::Grant => "GRANT",
            Keyword::Privileges => "PRIVILEGES",
        };
        write!(f, "{}", keyword_str)
    }
}
