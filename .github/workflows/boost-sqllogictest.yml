name: Boost SQLLogicTest Coverage

on:
  workflow_dispatch:
    inputs:
      time_budget:
        description: 'Time budget in seconds (default: 300 = 5 minutes)'
        required: false
        default: '300'
        type: string
      run_count:
        description: 'Number of sequential test runs (default: 1)'
        required: false
        default: '1'
        type: string
      parallel_runners:
        description: 'Number of parallel runners (default: 1, max: 10)'
        required: false
        default: '1'
        type: string
  # Optional: Run automatically on a schedule (commented out by default)
  # schedule:
  #   - cron: '0 */6 * * *'  # Every 6 hours

jobs:
  boost-coverage:
    name: Boost SQLLogicTest Coverage (Runner ${{ matrix.runner_id }})
    runs-on: ubuntu-latest
    if: matrix.runner_id <= fromJson(github.event.inputs.parallel_runners || '1')
    strategy:
      fail-fast: false
      matrix:
        runner_id: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-boost-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-boost-
            ${{ runner.os }}-cargo-

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Download historical SQLLogicTest results
        continue-on-error: true
        run: |
          echo "Downloading historical SQLLogicTest results..."
          mkdir -p target

          # Download and validate JSON
          if curl -sL https://rjwalters.github.io/nistmemsql/badges/sqllogictest_cumulative.json \
            -o sqllogictest_cumulative.json 2>/dev/null; then

            # Check if it's valid JSON (not an HTML error page)
            if jq empty sqllogictest_cumulative.json 2>/dev/null; then
              echo "✓ Downloaded existing cumulative results"
              jq '.summary' sqllogictest_cumulative.json || echo "{}"
              cp sqllogictest_cumulative.json target/sqllogictest_historical.json
            else
              echo "Downloaded file is not valid JSON (likely 404 page) - starting fresh"
              echo '{}' > target/sqllogictest_historical.json
            fi
          else
            echo "No existing cumulative results found - starting fresh"
            echo '{}' > target/sqllogictest_historical.json
          fi

      - name: Run SQLLogicTest boost (multiple runs)
        run: |
          TIME_BUDGET="${{ github.event.inputs.time_budget || '300' }}"
          RUN_COUNT="${{ github.event.inputs.run_count || '1' }}"

          echo "=== Boost Configuration ==="
          echo "Time budget per run: ${TIME_BUDGET}s"
          echo "Number of runs: ${RUN_COUNT}"
          echo ""

          mkdir -p target/boost_runs

          RUNNER_ID="${{ matrix.runner_id }}"

          for i in $(seq 1 $RUN_COUNT); do
            echo ""
            echo "=== Runner $RUNNER_ID - Boost Run $i of $RUN_COUNT ==="

            # Use timestamp + runner_id + run number as seed for variety
            SEED=$(date +%s)${RUNNER_ID}${i}
            echo "Using seed: $SEED (runner $RUNNER_ID, run $i)"

            # Run tests with unique seed
            SQLLOGICTEST_SEED=$SEED timeout $((TIME_BUDGET + 30)) \
              cargo test --test sqllogictest_suite --release -- --nocapture 2>&1 | \
              tee target/boost_runs/run_${RUNNER_ID}_${i}.log | \
              python3 scripts/analyze_sqllogictest.py

            # Save this run's results
            if [ -f target/sqllogictest_analysis.json ]; then
              cp target/sqllogictest_analysis.json target/boost_runs/analysis_${RUNNER_ID}_${i}.json
              echo "✓ Saved analysis for run $i"
            fi

            # Merge with cumulative results after each run
            if [ -f target/sqllogictest_analysis.json ]; then
              echo "Merging run $i with cumulative results..."
              python3 scripts/merge_sqllogictest_results.py \
                target/sqllogictest_analysis.json \
                target/sqllogictest_historical.json \
                target/sqllogictest_cumulative_new.json

              # Update historical for next iteration
              if [ -f target/sqllogictest_cumulative_new.json ]; then
                cp target/sqllogictest_cumulative_new.json target/sqllogictest_historical.json
                cp target/sqllogictest_cumulative_new.json target/sqllogictest_cumulative.json
                echo "✓ Updated cumulative results"
                cat target/sqllogictest_cumulative.json | jq '.summary'
              fi
            fi

            echo ""
          done

          echo ""
          echo "=== Boost Complete ==="
          if [ -f target/sqllogictest_cumulative.json ]; then
            echo "Final cumulative results:"
            cat target/sqllogictest_cumulative.json | jq '.summary'
          fi
        env:
          SQLLOGICTEST_TIME_BUDGET: ${{ github.event.inputs.time_budget || '300' }}

      - name: Generate boost summary
        if: always()
        run: |
          echo "# SQLLogicTest Boost Run Summary (Runner ${{ matrix.runner_id }})" > boost_summary.md
          echo "" >> boost_summary.md
          echo "**Triggered by:** ${{ github.actor }}" >> boost_summary.md
          echo "**Time:** $(date -u)" >> boost_summary.md
          echo "**Runner ID:** ${{ matrix.runner_id }} / ${{ github.event.inputs.parallel_runners || '1' }}" >> boost_summary.md
          echo "**Time budget per run:** ${{ github.event.inputs.time_budget || '300' }}s" >> boost_summary.md
          echo "**Number of runs:** ${{ github.event.inputs.run_count || '1' }}" >> boost_summary.md
          echo "" >> boost_summary.md

          if [ -f target/sqllogictest_cumulative.json ]; then
            echo "## Cumulative Results" >> boost_summary.md
            echo "" >> boost_summary.md
            echo '```json' >> boost_summary.md
            cat target/sqllogictest_cumulative.json | jq '.summary' >> boost_summary.md
            echo '```' >> boost_summary.md
            echo "" >> boost_summary.md
            echo "**Coverage:** $(jq -r '.summary.coverage_rate' target/sqllogictest_cumulative.json)%" >> boost_summary.md
            echo "**Pass Rate:** $(jq -r '.summary.pass_rate' target/sqllogictest_cumulative.json)%" >> boost_summary.md
            echo "**Files Tested:** $(jq -r '.summary.total_tested_files' target/sqllogictest_cumulative.json) / $(jq -r '.summary.total_available_files' target/sqllogictest_cumulative.json)" >> boost_summary.md

            if [ -f target/sqllogictest_cumulative.json ]; then
              NEW_TESTED=$(jq -r '.merge_info.new_files_tested // 0' target/sqllogictest_cumulative.json)
              echo "**New files tested this boost:** $NEW_TESTED" >> boost_summary.md
            fi
          fi

          cat boost_summary.md

      - name: Upload boost results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: boost-results-runner-${{ matrix.runner_id }}-${{ github.run_number }}
          path: |
            target/sqllogictest_cumulative.json
            target/sqllogictest_analysis.json
            target/boost_runs/*.json
            boost_summary.md
          retention-days: 90

      - name: Update gh-pages with new cumulative results (with retry for parallel runs)
        if: always() && github.ref == 'refs/heads/main'
        run: |
          if [ ! -f target/sqllogictest_cumulative.json ]; then
            echo "No cumulative results to publish"
            exit 0
          fi

          # Function to attempt push with merge retry
          push_with_retry() {
            local max_attempts=5
            local attempt=1

            while [ $attempt -le $max_attempts ]; do
              echo ""
              echo "=== Push attempt $attempt of $max_attempts ==="

              # Clone fresh copy
              rm -rf gh-pages-repo
              git clone --branch gh-pages --depth 1 https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} gh-pages-repo || {
                echo "❌ Failed to clone gh-pages branch"
                return 1
              }

              cd gh-pages-repo

              # Download latest cumulative results from gh-pages
              if [ -f badges/sqllogictest_cumulative.json ]; then
                echo "Found existing cumulative results on gh-pages, re-merging..."
                cp badges/sqllogictest_cumulative.json ../latest_from_ghpages.json

                # Re-merge our results with the latest from gh-pages
                cd ..
                python3 scripts/merge_sqllogictest_results.py \
                  target/sqllogictest_cumulative.json \
                  latest_from_ghpages.json \
                  target/sqllogictest_cumulative_final.json

                if [ -f target/sqllogictest_cumulative_final.json ]; then
                  cp target/sqllogictest_cumulative_final.json target/sqllogictest_cumulative.json
                  echo "✓ Re-merged with latest gh-pages results"
                fi
                cd gh-pages-repo
              else
                echo "No existing cumulative results on gh-pages"
              fi

              # Copy our final results
              mkdir -p badges
              cp ../target/sqllogictest_cumulative.json badges/
              echo "✓ Copied cumulative results to gh-pages clone"

              # Configure git
              git config user.name "github-actions[bot]"
              git config user.email "github-actions[bot]@users.noreply.github.com"

              # Check if there are changes
              git add badges/sqllogictest_cumulative.json
              if git diff --staged --quiet; then
                echo "No changes to commit"
                cd ..
                return 0
              fi

              # Commit
              git commit -m "Update SQLLogicTest cumulative results (boost run #${{ github.run_number }})"

              # Try to push
              if git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} gh-pages; then
                echo "✓ Successfully pushed cumulative results to gh-pages"
                cd ..
                return 0
              else
                echo "⚠️  Push failed (likely due to parallel update), retrying..."
                cd ..
                attempt=$((attempt + 1))
                sleep $((2 ** attempt))  # Exponential backoff
              fi
            done

            echo "❌ Failed to push after $max_attempts attempts"
            return 1
          }

          # Execute push with retry
          push_with_retry

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('boost_summary.md')) {
              const summary = fs.readFileSync('boost_summary.md', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }
