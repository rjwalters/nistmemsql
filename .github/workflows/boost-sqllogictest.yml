name: Boost SQLLogicTest Coverage

on:
  workflow_dispatch:
    inputs:
      time_budget:
        description: 'Time budget in seconds (default: 300 = 5 minutes)'
        required: false
        default: '300'
        type: string
      run_count:
        description: 'Number of sequential test runs (default: 1)'
        required: false
        default: '1'
        type: string
      parallel_runners:
        description: 'Number of parallel runners (default: 1, max: 10)'
        required: false
        default: '1'
        type: string
  # Optional: Run automatically on a schedule (commented out by default)
  # schedule:
  #   - cron: '0 */6 * * *'  # Every 6 hours

jobs:
  boost-coverage:
    name: Boost SQLLogicTest Coverage (Runner ${{ matrix.runner_id }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        runner_id: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

    steps:
      - name: Check if runner should execute
        id: should_run
        run: |
          PARALLEL_RUNNERS=${{ github.event.inputs.parallel_runners || '1' }}
          if [ ${{ matrix.runner_id }} -le $PARALLEL_RUNNERS ]; then
            echo "run=true" >> $GITHUB_OUTPUT
          else
            echo "run=false" >> $GITHUB_OUTPUT
          fi

      - name: Checkout repository
        if: steps.should_run.outputs.run == 'true'
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Rust
        if: steps.should_run.outputs.run == 'true'
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Cache Rust dependencies
        if: steps.should_run.outputs.run == 'true'
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-boost-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-boost-
            ${{ runner.os }}-cargo-

      - name: Setup Python
        if: steps.should_run.outputs.run == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Download historical SQLLogicTest results
        if: steps.should_run.outputs.run == 'true'
        continue-on-error: true
        run: |
          echo "Downloading historical SQLLogicTest results..."
          mkdir -p target

          # Download and validate JSON
          if curl -sL https://rjwalters.github.io/nistmemsql/badges/sqllogictest_cumulative.json \
            -o sqllogictest_cumulative.json 2>/dev/null; then

            # Check if it's valid JSON (not an HTML error page)
            if jq empty sqllogictest_cumulative.json 2>/dev/null; then
              echo "✓ Downloaded existing cumulative results"
              jq '.summary' sqllogictest_cumulative.json || echo "{}"
              cp sqllogictest_cumulative.json target/sqllogictest_historical.json
            else
              echo "Downloaded file is not valid JSON (likely 404 page) - starting fresh"
              echo '{}' > target/sqllogictest_historical.json
            fi
          else
            echo "No existing cumulative results found - starting fresh"
            echo '{}' > target/sqllogictest_historical.json
          fi

      - name: Run SQLLogicTest boost (multiple runs)
        if: steps.should_run.outputs.run == 'true'
        run: |
          TIME_BUDGET="${{ github.event.inputs.time_budget || '300' }}"
          RUN_COUNT="${{ github.event.inputs.run_count || '1' }}"

          echo "=== Boost Configuration ==="
          echo "Time budget per run: ${TIME_BUDGET}s"
          echo "Number of runs: ${RUN_COUNT}"
          echo ""

          mkdir -p target/boost_runs

          RUNNER_ID="${{ matrix.runner_id }}"

          for i in $(seq 1 $RUN_COUNT); do
            echo ""
            echo "=== Runner $RUNNER_ID - Boost Run $i of $RUN_COUNT ==="

            # Use timestamp + runner_id + run number as seed for variety
            SEED=$(date +%s)${RUNNER_ID}${i}
            echo "Using seed: $SEED (runner $RUNNER_ID, run $i)"

            # Run tests with unique seed
            SQLLOGICTEST_SEED=$SEED timeout $((TIME_BUDGET + 30)) \
              cargo test --test sqllogictest_suite --release -- --nocapture 2>&1 | \
              tee target/boost_runs/run_${RUNNER_ID}_${i}.log | \
              python3 scripts/analyze_sqllogictest.py

            # Save this run's results
            if [ -f target/sqllogictest_analysis.json ]; then
              cp target/sqllogictest_analysis.json target/boost_runs/analysis_${RUNNER_ID}_${i}.json
              echo "✓ Saved analysis for run $i"
            fi

            # Merge with cumulative results after each run
            if [ -f target/sqllogictest_analysis.json ]; then
              echo "Merging run $i with cumulative results..."
              python3 scripts/merge_sqllogictest_results.py \
                target/sqllogictest_analysis.json \
                target/sqllogictest_historical.json \
                target/sqllogictest_cumulative_new.json

              # Update historical for next iteration
              if [ -f target/sqllogictest_cumulative_new.json ]; then
                cp target/sqllogictest_cumulative_new.json target/sqllogictest_historical.json
                cp target/sqllogictest_cumulative_new.json target/sqllogictest_cumulative.json
                echo "✓ Updated cumulative results"
                cat target/sqllogictest_cumulative.json | jq '.summary'
              fi
            fi

            echo ""
          done

          echo ""
          echo "=== Boost Complete ==="
          if [ -f target/sqllogictest_cumulative.json ]; then
            echo "Final cumulative results:"
            cat target/sqllogictest_cumulative.json | jq '.summary'
          fi
        env:
          SQLLOGICTEST_TIME_BUDGET: ${{ github.event.inputs.time_budget || '300' }}

      - name: Generate boost summary
        if: always() && steps.should_run.outputs.run == 'true'
        run: |
          echo "# SQLLogicTest Boost Run Summary (Runner ${{ matrix.runner_id }})" > boost_summary.md
          echo "" >> boost_summary.md
          echo "**Triggered by:** ${{ github.actor }}" >> boost_summary.md
          echo "**Time:** $(date -u)" >> boost_summary.md
          echo "**Runner ID:** ${{ matrix.runner_id }} / ${{ github.event.inputs.parallel_runners || '1' }}" >> boost_summary.md
          echo "**Time budget per run:** ${{ github.event.inputs.time_budget || '300' }}s" >> boost_summary.md
          echo "**Number of runs:** ${{ github.event.inputs.run_count || '1' }}" >> boost_summary.md
          echo "" >> boost_summary.md

          if [ -f target/sqllogictest_cumulative.json ]; then
            echo "## Cumulative Results" >> boost_summary.md
            echo "" >> boost_summary.md
            echo '```json' >> boost_summary.md
            cat target/sqllogictest_cumulative.json | jq '.summary' >> boost_summary.md
            echo '```' >> boost_summary.md
            echo "" >> boost_summary.md
            echo "**Coverage:** $(jq -r '.summary.coverage_rate' target/sqllogictest_cumulative.json)%" >> boost_summary.md
            echo "**Pass Rate:** $(jq -r '.summary.pass_rate' target/sqllogictest_cumulative.json)%" >> boost_summary.md
            echo "**Files Tested:** $(jq -r '.summary.total_tested_files' target/sqllogictest_cumulative.json) / $(jq -r '.summary.total_available_files' target/sqllogictest_cumulative.json)" >> boost_summary.md

            if [ -f target/sqllogictest_cumulative.json ]; then
              NEW_TESTED=$(jq -r '.merge_info.new_files_tested // 0' target/sqllogictest_cumulative.json)
              echo "**New files tested this boost:** $NEW_TESTED" >> boost_summary.md
            fi
          fi

          cat boost_summary.md

      - name: Upload boost results
        uses: actions/upload-artifact@v4
        if: always() && steps.should_run.outputs.run == 'true'
        with:
          name: boost-results-${{ github.run_number }}-runner-${{ matrix.runner_id }}
          path: |
            target/sqllogictest_cumulative.json
            target/sqllogictest_analysis.json
            target/boost_runs/*.json
            boost_summary.md
          retention-days: 90

  # Aggregation job: Collects results from all parallel runners and pushes once
  aggregate-results:
    name: Aggregate Results and Update gh-pages
    runs-on: ubuntu-latest
    needs: boost-coverage
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Download all runner artifacts for this run
        uses: actions/download-artifact@v4
        with:
          pattern: boost-results-${{ github.run_number }}-runner-*
          path: artifacts/
          merge-multiple: false

      - name: Download historical SQLLogicTest results
        continue-on-error: true
        run: |
          echo "Downloading historical cumulative results from gh-pages..."
          mkdir -p aggregated

          if curl -sL https://rjwalters.github.io/nistmemsql/badges/sqllogictest_cumulative.json \
            -o aggregated/sqllogictest_historical.json 2>/dev/null; then
            if jq empty aggregated/sqllogictest_historical.json 2>/dev/null; then
              echo "✓ Downloaded existing cumulative results"
              jq '.summary' aggregated/sqllogictest_historical.json
            else
              echo "Downloaded file is not valid JSON - starting fresh"
              echo '{}' > aggregated/sqllogictest_historical.json
            fi
          else
            echo "No existing cumulative results found - starting fresh"
            echo '{}' > aggregated/sqllogictest_historical.json
          fi

      - name: Merge all runner results
        run: |
          echo "=== Aggregating Results from All Runners ==="
          echo ""

          # Start with historical data
          cp aggregated/sqllogictest_historical.json aggregated/sqllogictest_merged.json

          # Find all runner result files
          RUNNER_FILES=$(find artifacts -name "sqllogictest_cumulative.json" | sort)
          RUNNER_COUNT=$(echo "$RUNNER_FILES" | wc -l | tr -d ' ')

          echo "Found $RUNNER_COUNT runner result files"
          echo ""

          # Merge each runner's results
          RUNNER_NUM=1
          for result_file in $RUNNER_FILES; do
            echo "Merging runner $RUNNER_NUM results..."

            python3 scripts/merge_sqllogictest_results.py \
              "$result_file" \
              aggregated/sqllogictest_merged.json \
              aggregated/sqllogictest_merged_new.json

            if [ -f aggregated/sqllogictest_merged_new.json ]; then
              mv aggregated/sqllogictest_merged_new.json aggregated/sqllogictest_merged.json
              echo "✓ Merged runner $RUNNER_NUM"
            fi

            RUNNER_NUM=$((RUNNER_NUM + 1))
          done

          echo ""
          echo "=== Final Aggregated Results ==="
          jq '.summary' aggregated/sqllogictest_merged.json

      - name: Update gh-pages with aggregated results
        run: |
          if [ ! -f aggregated/sqllogictest_merged.json ]; then
            echo "No aggregated results to publish"
            exit 0
          fi

          # Try to clone gh-pages branch
          if git clone --branch gh-pages --depth 1 \
            https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} gh-pages-repo 2>/dev/null; then

            echo "✓ Cloned existing gh-pages branch"
            cd gh-pages-repo

          else
            echo "⚠️  gh-pages branch doesn't exist yet - will be created by main CI workflow"
            echo "Saving aggregated results as artifact for now..."

            # Save results for later (main CI will create gh-pages)
            mkdir -p gh-pages-staging
            cp aggregated/sqllogictest_merged.json gh-pages-staging/sqllogictest_cumulative.json

            echo ""
            echo "=== Aggregated Results (not yet published) ==="
            jq '.' gh-pages-staging/sqllogictest_cumulative.json

            exit 0
          fi

          # Copy aggregated results
          mkdir -p badges
          cp ../aggregated/sqllogictest_merged.json badges/sqllogictest_cumulative.json

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Commit and push
          git add badges/sqllogictest_cumulative.json

          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi

          git commit -m "Update SQLLogicTest cumulative results (boost run #${{ github.run_number }})"
          git push

          echo "✓ Successfully pushed aggregated results to gh-pages"
