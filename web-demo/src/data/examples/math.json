{
  "math-1": {
    "title": "Absolute Value and Sign",
    "database": "northwind",
    "sql": "SELECT\n  unit_price,\n  unit_price - 20 AS price_diff,\n  ABS(unit_price - 20) AS abs_diff,\n  SIGN(unit_price - 20) AS sign_indicator\nFROM products\nLIMIT 10;",
    "description": "Calculate absolute values and sign indicators for price differences",
    "sqlFeatures": [
      "ABS",
      "SIGN",
      "Expressions"
    ]
  },
  "math-2": {
    "title": "Rounding Functions",
    "database": "northwind",
    "sql": "SELECT\n  unit_price,\n  ROUND(unit_price) AS rounded,\n  ROUND(unit_price, 1) AS one_decimal,\n  FLOOR(unit_price) AS floor_value,\n  CEIL(unit_price) AS ceiling_value\nFROM products\nWHERE unit_price IS NOT NULL\nLIMIT 10;",
    "description": "Demonstrate various rounding methods for numeric values",
    "sqlFeatures": [
      "ROUND",
      "FLOOR",
      "CEIL",
      "WHERE"
    ]
  },
  "math-3": {
    "title": "Power and Square Root",
    "database": "northwind",
    "sql": "SELECT\n  unit_price,\n  POWER(unit_price, 2) AS squared,\n  SQRT(unit_price) AS square_root,\n  ROUND(SQRT(unit_price), 2) AS sqrt_rounded\nFROM products\nWHERE unit_price > 0\nLIMIT 10;",
    "description": "Calculate squares, square roots, and combinations",
    "sqlFeatures": [
      "POWER",
      "SQRT",
      "ROUND",
      "WHERE"
    ]
  },
  "math-4": {
    "title": "Modulo (Remainder)",
    "database": "northwind",
    "sql": "SELECT\n  product_id,\n  product_name,\n  MOD(product_id, 3) AS group_number,\n  CASE\n    WHEN MOD(product_id, 3) = 0 THEN 'Group A'\n    WHEN MOD(product_id, 3) = 1 THEN 'Group B'\n    ELSE 'Group C'\n  END AS group_name\nFROM products\nORDER BY product_id\nLIMIT 15;",
    "description": "Use MOD to divide products into rotating groups",
    "sqlFeatures": [
      "MOD",
      "CASE",
      "ORDER BY"
    ]
  },
  "math-5": {
    "title": "Logarithmic Functions",
    "database": "northwind",
    "sql": "SELECT\n  unit_price,\n  ROUND(LN(unit_price), 2) AS natural_log,\n  ROUND(LOG10(unit_price), 2) AS log_base_10,\n  ROUND(EXP(1.0), 4) AS e_constant\nFROM products\nWHERE unit_price > 0\nLIMIT 10;",
    "description": "Calculate natural logarithms, base-10 logarithms, and exponentials",
    "sqlFeatures": [
      "LN",
      "LOG10",
      "EXP",
      "ROUND"
    ]
  },
  "math-6": {
    "title": "Trigonometric Functions",
    "database": "northwind",
    "sql": "SELECT\n  ROUND(PI(), 6) AS pi_value,\n  ROUND(SIN(PI() / 2), 4) AS sin_90_degrees,\n  ROUND(COS(PI()), 4) AS cos_180_degrees,\n  ROUND(TAN(PI() / 4), 4) AS tan_45_degrees\nFROM (SELECT * FROM products LIMIT 1) AS dummy;",
    "description": "Demonstrate trigonometric functions with common angles",
    "sqlFeatures": [
      "PI",
      "SIN",
      "COS",
      "TAN",
      "ROUND"
    ]
  },
  "math-7": {
    "title": "Inverse Trigonometric Functions",
    "database": "northwind",
    "sql": "SELECT\n  ROUND(ASIN(1.0), 4) AS asin_1,\n  ROUND(ACOS(0.0), 4) AS acos_0,\n  ROUND(ATAN(1.0), 4) AS atan_1,\n  ROUND(ATAN2(1.0, 1.0), 4) AS atan2_1_1\nFROM (SELECT * FROM products LIMIT 1) AS dummy;",
    "description": "Calculate inverse trigonometric functions (arcsin, arccos, arctan)",
    "sqlFeatures": [
      "ASIN",
      "ACOS",
      "ATAN",
      "ATAN2",
      "ROUND"
    ]
  },
  "math-8": {
    "title": "Angle Conversions",
    "database": "northwind",
    "sql": "SELECT\n  180 AS degrees,\n  ROUND(RADIANS(180), 4) AS radians,\n  ROUND(DEGREES(PI()), 2) AS back_to_degrees\nFROM (SELECT * FROM products LIMIT 1) AS dummy;",
    "description": "Convert between degrees and radians",
    "sqlFeatures": [
      "RADIANS",
      "DEGREES",
      "PI",
      "ROUND"
    ]
  },
  "math-9": {
    "title": "GREATEST and LEAST",
    "database": "northwind",
    "sql": "SELECT\n  product_name,\n  unit_price,\n  units_in_stock,\n  GREATEST(unit_price, units_in_stock) AS max_value,\n  LEAST(unit_price, units_in_stock) AS min_value\nFROM products\nWHERE unit_price IS NOT NULL AND units_in_stock IS NOT NULL\nLIMIT 10;",
    "description": "Find maximum and minimum values across columns",
    "sqlFeatures": [
      "GREATEST",
      "LEAST",
      "WHERE"
    ]
  },
  "math-10": {
    "title": "Price Calculations",
    "database": "northwind",
    "sql": "SELECT\n  product_name,\n  unit_price,\n  ROUND(unit_price * 1.08, 2) AS with_tax,\n  ROUND(unit_price * 0.9, 2) AS discounted,\n  FLOOR(unit_price) || '.99' AS psychological_price\nFROM products\nWHERE unit_price > 0\nORDER BY unit_price DESC\nLIMIT 10;",
    "description": "Practical business calculations: taxes, discounts, and pricing strategies",
    "sqlFeatures": [
      "ROUND",
      "FLOOR",
      "String concatenation",
      "Business calculations"
    ]
  }
}