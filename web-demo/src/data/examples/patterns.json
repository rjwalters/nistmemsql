{
  "pattern-1": {
    "title": "LIKE Pattern Matching (Basic)",
    "database": "northwind",
    "sql": "SELECT\n  product_name,\n  unit_price\nFROM products\nWHERE product_name LIKE 'Ch%'\nORDER BY product_name;",
    "description": "Match products starting with \"Ch\" using % wildcard",
    "sqlFeatures": [
      "LIKE",
      "% wildcard",
      "Pattern matching"
    ]
  },
  "pattern-2": {
    "title": "LIKE with Multiple Patterns",
    "database": "northwind",
    "sql": "SELECT\n  product_name,\n  category_id\nFROM products\nWHERE product_name LIKE '%sauce%'\n   OR product_name LIKE '%cream%'\nORDER BY product_name;",
    "description": "Find products containing \"sauce\" or \"cream\" (case-insensitive)",
    "sqlFeatures": [
      "LIKE",
      "OR",
      "Case-insensitive matching"
    ]
  },
  "pattern-3": {
    "title": "LIKE with Underscore Wildcard",
    "database": "employees",
    "sql": "SELECT\n  first_name,\n  last_name\nFROM employees\nWHERE first_name LIKE 'J_hn'\nORDER BY last_name;",
    "description": "Match names like \"John\" using _ for single character",
    "sqlFeatures": [
      "LIKE",
      "_ wildcard",
      "Single character matching"
    ]
  },
  "pattern-4": {
    "title": "BETWEEN for Ranges",
    "database": "northwind",
    "sql": "SELECT\n  product_name,\n  unit_price\nFROM products\nWHERE unit_price BETWEEN 10 AND 50\nORDER BY unit_price;",
    "description": "Find products with prices in the 10-50 range (inclusive)",
    "sqlFeatures": [
      "BETWEEN",
      "Numeric ranges",
      "Inclusive bounds"
    ]
  },
  "pattern-5": {
    "title": "BETWEEN with Dates",
    "database": "employees",
    "sql": "SELECT\n  first_name || ' ' || last_name AS employee,\n  hire_date,\n  department\nFROM employees\nWHERE YEAR(hire_date) BETWEEN 2019 AND 2021\nORDER BY hire_date;",
    "description": "Filter employees hired between 2019-2021 using date functions",
    "sqlFeatures": [
      "BETWEEN",
      "YEAR",
      "Date ranges"
    ]
  },
  "pattern-6": {
    "title": "IN with List",
    "database": "northwind",
    "sql": "SELECT\n  product_name,\n  category_id,\n  unit_price\nFROM products\nWHERE category_id IN (1, 2, 3)\nORDER BY category_id, unit_price DESC;",
    "description": "Find products in specific categories using IN operator",
    "sqlFeatures": [
      "IN",
      "List of values",
      "Multi-column ORDER BY"
    ]
  },
  "pattern-7": {
    "title": "IN with Subquery",
    "database": "northwind",
    "sql": "SELECT\n  product_name,\n  unit_price\nFROM products\nWHERE category_id IN (\n  SELECT category_id\n  FROM categories\n  WHERE category_name LIKE '%Bev%'\n)\nORDER BY unit_price DESC;",
    "description": "Use IN with subquery to find products in Beverage categories",
    "sqlFeatures": [
      "IN",
      "Subquery",
      "LIKE",
      "Dynamic filtering"
    ]
  },
  "pattern-8": {
    "title": "EXISTS with Correlated Subquery",
    "database": "northwind",
    "sql": "SELECT\n  c.category_name\nFROM categories c\nWHERE EXISTS (\n  SELECT 1\n  FROM products p\n  WHERE p.category_id = c.category_id\n    AND p.unit_price > 50\n)\nORDER BY c.category_name;",
    "description": "Find categories that have expensive products (>$50)",
    "sqlFeatures": [
      "EXISTS",
      "Correlated subquery",
      "Existential check"
    ]
  },
  "pattern-9": {
    "title": "NOT IN and NOT BETWEEN",
    "database": "northwind",
    "sql": "SELECT\n  product_name,\n  unit_price\nFROM products\nWHERE unit_price NOT BETWEEN 10 AND 30\n  AND category_id NOT IN (1, 2)\nORDER BY unit_price DESC\nLIMIT 10;",
    "description": "Find products outside price range and excluded categories",
    "sqlFeatures": [
      "NOT BETWEEN",
      "NOT IN",
      "Negative predicates",
      "LIMIT"
    ]
  },
  "pattern-10": {
    "title": "Combining Predicates",
    "database": "northwind",
    "sql": "SELECT\n  product_name,\n  category_id,\n  unit_price,\n  units_in_stock\nFROM products\nWHERE product_name LIKE 'C%'\n  AND unit_price BETWEEN 5 AND 100\n  AND category_id IN (1, 2, 3, 4)\n  AND units_in_stock > 0\nORDER BY unit_price DESC;",
    "description": "Complex filtering using multiple predicates together",
    "sqlFeatures": [
      "LIKE",
      "BETWEEN",
      "IN",
      "AND",
      "Multiple predicates"
    ]
  },
  "pattern-11": {
    "title": "ALL Quantified Comparison",
    "database": "northwind",
    "sql": "SELECT\n  product_name,\n  unit_price\nFROM products p\nWHERE unit_price > ALL (\n  SELECT unit_price\n  FROM products\n  WHERE category_id = 1\n)\nORDER BY unit_price DESC\nLIMIT 5;",
    "description": "Find products more expensive than ALL category 1 products",
    "sqlFeatures": [
      "ALL",
      "Quantified comparison",
      "Subquery",
      "Universal quantifier"
    ]
  },
  "pattern-12": {
    "title": "ANY/SOME Quantified Comparison",
    "database": "northwind",
    "sql": "SELECT\n  product_name,\n  unit_price,\n  category_id\nFROM products p\nWHERE unit_price > ANY (\n  SELECT AVG(unit_price)\n  FROM products\n  GROUP BY category_id\n)\nORDER BY unit_price DESC\nLIMIT 10;",
    "description": "Find products more expensive than ANY category average",
    "sqlFeatures": [
      "ANY",
      "SOME",
      "Quantified comparison",
      "AVG",
      "GROUP BY",
      "Existential quantifier"
    ]
  }
}